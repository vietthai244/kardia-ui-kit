declare var React: any;
declare var styled: any;
declare var styledSystem: any;
declare var get: any;
declare var uniqueId: any;
declare var lodash: any;
declare var reactDom: any;
declare var reactPopper: any;
declare var reactRouterDom: any;
declare var noop: any;
declare var debounce: any;
declare var throttle: any;
declare function _interopDefaultLegacy(e: any): any;
declare function _interopNamespace(e: any): any;
declare var React__default: any;
declare var React__namespace: any;
declare var styled__default: any;
declare var get__default: any;
declare var uniqueId__default: any;
declare var noop__default: any;
declare var debounce__default: any;
declare var throttle__default: any;
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
declare var __assign: () => any;
declare function __rest(s: any, e: any): {};
declare function __spreadArray(to: any, from: any, pack: any): any;
declare function __makeTemplateObject(cooked: any, raw: any): any;
declare var getThemeValue: (path: any, fallback: any) => (theme: any) => any;
declare var rotate$1: any;
declare var spinStyle: any;
declare var Svg: any;
declare var templateObject_1$1a: any, templateObject_2$y: any, templateObject_3$f: any;
declare var Icon$2d: (props: any) => any;
declare var Icon$2c: (props: any) => any;
declare var Icon$2b: (props: any) => any;
declare var Icon$2a: (props: any) => any;
declare var getColor: (_a: any) => any;
declare var getFontSize: (_a: any) => any;
declare var Text: {
    new (data?: string | undefined): Text;
    prototype: Text;
};
declare var templateObject_1$19: any;
declare var TooltipText: any;
declare var templateObject_1$18: any;
declare var getExternalLinkProps: () => {
    target: string;
    rel: string;
};
declare var scales$8: {
    MD: string;
    SM: string;
    XS: string;
};
declare var variants$6: {
    PRIMARY: string;
    SECONDARY: string;
    TERTIARY: string;
    TEXT: string;
    DANGER: string;
    SUBTLE: string;
    SUCCESS: string;
    LIGHT: string;
};
declare var _a$4: any, _b$3: any;
declare var scaleVariants$1: {};
declare var styleVariants$2: {};
declare var getDisabledStyles: (_a: any) => string;
/**
 * This is to get around an issue where if you use a Link component
 * React will throw a invalid DOM attribute error
 * @see https://github.com/styled-components/styled-components/issues/135
 */
declare var getOpacity: (_a: any) => ".5" | "1";
declare var StyledButton: any;
declare var templateObject_1$17: any;
declare var Button: (props: any) => any;
declare var IconButton: any;
declare var templateObject_1$16: any;
declare var Icon$29: (props: any) => any;
declare var Icon$28: (props: any) => any;
declare var Icon$27: (props: any) => any;
declare var Icon$26: (props: any) => any;
declare var Icon$25: (props: any) => any;
declare var Icon$24: (props: any) => any;
declare var Icon$23: (props: any) => any;
declare var Icon$22: (props: any) => any;
declare var Icon$21: (props: any) => any;
declare var Icon$20: (props: any) => any;
declare var Icon$1$: (props: any) => any;
declare var Icon$1_: (props: any) => any;
declare var Icon$1Z: (props: any) => any;
declare var Icon$1Y: (props: any) => any;
declare var Icon$1X: (props: any) => any;
declare var Icon$1W: (props: any) => any;
declare var Icon$1V: (props: any) => any;
declare var Icon$1U: (props: any) => any;
declare var Icon$1T: (props: any) => any;
declare var Icon$1S: (props: any) => any;
declare var Icon$1R: (props: any) => any;
declare var Icon$1Q: (props: any) => any;
declare var Icon$1P: (props: any) => any;
declare var Icon$1O: (props: any) => any;
declare var Icon$1N: (props: any) => any;
declare var Icon$1M: (props: any) => any;
declare var Icon$1L: (props: any) => any;
declare var Icon$1K: (props: any) => any;
declare var Icon$1J: (props: any) => any;
declare var Icon$1I: (props: any) => any;
declare var Icon$1H: (props: any) => any;
declare var Icon$1G: (props: any) => any;
declare var Icon$1F: (props: any) => any;
declare var Icon$1E: (props: any) => any;
declare var Icon$1D: (props: any) => any;
declare var Icon$1C: (props: any) => any;
declare var Icon$1B: (props: any) => any;
declare var Icon$1A: (props: any) => any;
declare var Icon$1z: (props: any) => any;
declare var Icon$1y: (props: any) => any;
declare var Icon$1x: (props: any) => any;
declare var Icon$1w: (props: any) => any;
declare var Icon$1v: (props: any) => any;
declare var Icon$1u: (props: any) => any;
declare var Icon$1t: (props: any) => any;
declare var Icon$1s: (props: any) => any;
declare var Icon$1r: (props: any) => any;
declare var Icon$1q: (props: any) => any;
declare var Icon$1p: (props: any) => any;
declare var Icon$1o: (props: any) => any;
declare var Icon$1n: (props: any) => any;
declare var Icon$1m: (props: any) => any;
declare var Logo$2: (_a: any) => any;
declare var LogoWithTextIcon: any;
declare var Icon$1l: (props: any) => any;
declare var Icon$1k: (props: any) => any;
declare var Icon$1j: (props: any) => any;
declare var Icon$1i: (props: any) => any;
declare var Icon$1h: (props: any) => any;
declare var Icon$1g: (props: any) => any;
declare var Icon$1f: (props: any) => any;
declare var Icon$1e: (props: any) => any;
declare var Icon$1d: (props: any) => any;
declare var Icon$1c: (props: any) => any;
declare var Icon$1b: (props: any) => any;
declare var Icon$1a: (props: any) => any;
declare var Icon$19: (props: any) => any;
declare var Icon$18: (props: any) => any;
declare var Icon$17: (props: any) => any;
declare var Icon$16: (props: any) => any;
declare var Icon$15: (props: any) => any;
declare var Icon$14: (props: any) => any;
declare var Icon$13: (props: any) => any;
declare var Icon$12: (props: any) => any;
declare var Icon$11: (props: any) => any;
declare var Icon$10: (props: any) => any;
declare var Icon$$: (props: any) => any;
declare var Icon$_: (props: any) => any;
declare var Icon$Z: (props: any) => any;
declare var Icon$Y: (props: any) => any;
declare var Icon$X: (props: any) => any;
declare var Icon$W: (props: any) => any;
declare var Icon$V: (props: any) => any;
declare var Icon$U: (props: any) => any;
declare var Icon$T: (props: any) => any;
declare var Icon$S: (props: any) => any;
declare var Icon$R: (props: any) => any;
declare var Icon$Q: (props: any) => any;
declare var Icon$P: (props: any) => any;
declare var Icon$O: (props: any) => any;
declare var Icon$N: (props: any) => any;
declare var Icon$M: (props: any) => any;
declare var Icon$L: (props: any) => any;
declare var Icon$K: (props: any) => any;
declare var Icon$J: (props: any) => any;
declare var Icon$I: (props: any) => any;
declare var Icon$H: (props: any) => any;
declare var Icon$G: (props: any) => any;
declare var Icon$F: (props: any) => any;
declare var Icon$E: (props: any) => any;
declare var Icon$D: (props: any) => any;
declare var Icon$C: (props: any) => any;
declare var Icon$B: (props: any) => any;
declare var Icon$A: (props: any) => any;
declare var Icon$z: (props: any) => any;
declare var Icon$y: (props: any) => any;
declare var Icon$x: (props: any) => any;
declare var Icon$w: (props: any) => any;
declare var Icon$v: (props: any) => any;
declare var Icon$u: (props: any) => any;
declare var Icon$t: (props: any) => any;
declare var Icon$s: (props: any) => any;
declare var Icon$r: (props: any) => any;
declare var Icon$q: (props: any) => any;
declare var Icon$p: (props: any) => any;
declare var Icon$o: (props: any) => any;
declare var Icon$n: (props: any) => any;
declare var Icon$m: (props: any) => any;
declare var Icon$l: (props: any) => any;
declare var Icon$k: (props: any) => any;
declare var Icon$j: (props: any) => any;
declare var Icon$i: (props: any) => any;
declare var Icon$h: (props: any) => any;
declare var Icon$g: (props: any) => any;
declare var Icon$f: (props: any) => any;
declare var Icon$e: (props: any) => any;
declare var Icon$d: (props: any) => any;
declare var Icon$c: (props: any) => any;
declare var Icon$b: (props: any) => any;
declare var Icon$a: (props: any) => any;
declare var Icon$9: (props: any) => any;
declare var Icon$8: (props: any) => any;
declare var Icon$7: (props: any) => any;
declare var Icon$6: (props: any) => any;
declare var Icon$5: (props: any) => any;
declare var Icon$4: (props: any) => any;
declare var Icon$3: (props: any) => any;
declare var Icon$2: (props: any) => any;
declare var IconModule: Readonly<{
    __proto__: null;
    AccountIcon: (props: any) => any;
    AccountFilledIcon: (props: any) => any;
    AddIcon: (props: any) => any;
    ArrowBackIcon: (props: any) => any;
    ArrowDownIcon: (props: any) => any;
    ArrowDropDownIcon: (props: any) => any;
    ArrowDropUpIcon: (props: any) => any;
    ArrowFirstIcon: (props: any) => any;
    ArrowForwardIcon: (props: any) => any;
    ArrowLastIcon: (props: any) => any;
    ArrowUpIcon: (props: any) => any;
    AutoRenewIcon: (props: any) => any;
    BinanceIcon: (props: any) => any;
    BinanceChainIcon: (props: any) => any;
    BlockIcon: (props: any) => any;
    BnbUsdtPairTokenIcon: (props: any) => any;
    BscScanIcon: (props: any) => any;
    BunnyCardsIcon: (props: any) => any;
    BunnyPlaceholderIcon: (props: any) => any;
    CameraIcon: (props: any) => any;
    Cards: (props: any) => any;
    CardViewIcon: (props: any) => any;
    CalculateIcon: (props: any) => any;
    CircleOutlineIcon: (props: any) => any;
    ChartIcon: (props: any) => any;
    CheckmarkIcon: (props: any) => any;
    CheckmarkCircleIcon: (props: any) => any;
    CheckmarkCircleFillIcon: (props: any) => any;
    ChevronDownIcon: (props: any) => any;
    ChevronLeftIcon: (props: any) => any;
    ChevronRightIcon: (props: any) => any;
    ChevronUpIcon: (props: any) => any;
    CloseIcon: (props: any) => any;
    CogIcon: (props: any) => any;
    Coin98Icon: (props: any) => any;
    CommunityIcon: (props: any) => any;
    CommunityFilledIcon: (props: any) => any;
    CopyIcon: (props: any) => any;
    CrownIcon: (props: any) => any;
    CurrencyIcon: (props: any) => any;
    EarnIcon: (props: any) => any;
    EarnFilledIcon: (props: any) => any;
    ErrorIcon: (props: any) => any;
    EllipsisIcon: (props: any) => any;
    InstagramIcon: (props: any) => any;
    GithubIcon: (props: any) => any;
    HelpIcon: (props: any) => any;
    HistoryIcon: (props: any) => any;
    InfoIcon: (props: any) => any;
    LanguageIcon: (props: any) => any;
    LanguageCurrencyIcon: (props: any) => any;
    LaurelLeftIcon: (props: any) => any;
    LaurelRightIcon: (props: any) => any;
    ListViewIcon: (props: any) => any;
    LoginIcon: (props: any) => any;
    LogoIcon: (props: any) => any;
    LogoWithTextIcon: any;
    LogoRoundIcon: (props: any) => any;
    MathWalletIcon: (props: any) => any;
    LogoutIcon: (props: any) => any;
    MedalBronzeIcon: (props: any) => any;
    MedalGoldIcon: (props: any) => any;
    MedalPurpleIcon: (props: any) => any;
    MedalSilverIcon: (props: any) => any;
    MedalTealIcon: (props: any) => any;
    MetamaskIcon: (props: any) => any;
    MinusIcon: (props: any) => any;
    MoreHorizontalIcon: (props: any) => any;
    MoreVerticalIcon: (props: any) => any;
    NftIcon: (props: any) => any;
    NftFilledIcon: (props: any) => any;
    NoProfileAvatarIcon: (props: any) => any;
    OpenNewIcon: (props: any) => any;
    PancakesIcon: (props: any) => any;
    PencilIcon: (props: any) => any;
    PancakeRoundIcon: (props: any) => any;
    PocketWatchIcon: (props: any) => any;
    PlayCircleOutlineIcon: (props: any) => any;
    PredictionsIcon: (props: any) => any;
    PrizeIcon: (props: any) => any;
    ProposalIcon: (props: any) => any;
    RemoveIcon: (props: any) => any;
    VerifiedIcon: (props: any) => any;
    ProgressBunny: (props: any) => any;
    PresentCheckIcon: (props: any) => any;
    PresentWonIcon: (props: any) => any;
    PresentNoneIcon: (props: any) => any;
    RedditIcon: (props: any) => any;
    RefreshIcon: (props: any) => any;
    ResourcesIcon: (props: any) => any;
    ResourcesFilledIcon: (props: any) => any;
    SafePalIcon: (props: any) => any;
    SearchIcon: (props: any) => any;
    SellIcon: (props: any) => any;
    ShareIcon: (props: any) => any;
    SmallDotIcon: (props: any) => any;
    StarFillIcon: (props: any) => any;
    StarLineIcon: (props: any) => any;
    SwapIcon: (props: any) => any;
    SwapFillIcon: (props: any) => any;
    SwapVertIcon: (props: any) => any;
    SyncAltIcon: (props: any) => any;
    TeamPlayerIcon: (props: any) => any;
    TelegramIcon: (props: any) => any;
    TestnetIcon: (props: any) => any;
    Ticket: (props: any) => any;
    TicketFillIcon: (props: any) => any;
    TicketRound: (props: any) => any;
    TimerIcon: (props: any) => any;
    TokenPocketIcon: (props: any) => any;
    TradeIcon: (props: any) => any;
    TradeFilledIcon: (props: any) => any;
    TrophyGoldIcon: (props: any) => any;
    TrustWalletIcon: (props: any) => any;
    TwitterIcon: (props: any) => any;
    TuneIcon: (props: any) => any;
    VisibilityOff: (props: any) => any;
    VisibilityOn: (props: any) => any;
    VolumeOffIcon: (props: any) => any;
    VolumeUpIcon: (props: any) => any;
    VoteIcon: (props: any) => any;
    WarningIcon: (props: any) => any;
    WalletConnectIcon: (props: any) => any;
    WalletIcon: (props: any) => any;
    WalletFilledIcon: (props: any) => any;
    WaitIcon: (props: any) => any;
    FarmIcon: (props: any) => any;
    GroupsIcon: (props: any) => any;
    HamburgerIcon: (props: any) => any;
    HamburgerCloseIcon: (props: any) => any;
    HomeIcon: (props: any) => any;
    IfoIcon: (props: any) => any;
    MoonIcon: (props: any) => any;
    MoreIcon: (props: any) => any;
    NftFillIcon: (props: any) => any;
    PoolIcon: (props: any) => any;
    SunIcon: (props: any) => any;
    TeamBattleIcon: (props: any) => any;
    TicketIcon: (props: any) => any;
    EarnFillIcon: (props: any) => any;
    TrophyIcon: (props: any) => any;
    TrophyFillIcon: (props: any) => any;
    Svg: any;
}>;
declare var ExpandableButton: (_a: any) => any;
declare var ExpandableLabel: (_a: any) => any;
declare var Box: any;
declare var templateObject_1$15: any;
declare var Flex: any;
declare var templateObject_1$14: any;
declare var variants$5: {
    INFO: string;
    DANGER: string;
    SUCCESS: string;
    WARNING: string;
};
declare var getThemeColor: (_a: any) => any;
declare var getIcon: (variant: any) => (props: any) => any;
declare var IconLabel: any;
declare var withHandlerSpacing: number;
declare var Details: any;
declare var CloseHandler: any;
declare var StyledAlert: any;
declare var Alert: (_a: any) => any;
declare var templateObject_1$13: any, templateObject_2$x: any, templateObject_3$e: any, templateObject_4$b: any;
declare var Grid: any;
declare var templateObject_1$12: any;
declare var scales$7: {
    SM: string;
    MD: string;
    LG: string;
};
/**
 * Priority: Warning --> Success
 */
declare var getBoxShadow: (_a: any) => any;
declare var getHeight: (_a: any) => "48px" | "32px" | "40px";
declare var Input$1: any;
declare var templateObject_1$11: any;
declare var SwitchUnitsButton: any;
declare var UnitContainer: any;
declare var StyledBalanceInput: any;
declare var StyledInput$1: any;
declare var templateObject_1$10: any, templateObject_2$w: any, templateObject_3$d: any, templateObject_4$a: any;
declare var BalanceInput: (_a: any) => any;
declare var Textfield: (_a: any) => any;
declare var Separator: any;
declare var StyledBreadcrumbs: any;
declare var insertSeparators: (items: any, separator: any) => any;
declare var DefaultSeparator: any;
declare var Breadcrumbs: (_a: any) => any;
declare var templateObject_1$$: any, templateObject_2$v: any;
declare var getBackgroundColor: (_a: any) => any;
declare var getBorderColor$1: (_a: any) => any;
declare var StyledButtonMenu: any;
declare var ButtonMenu$1: (_a: any) => any;
declare var templateObject_1$_: any;
declare var InactiveButton: any;
declare var ButtonMenuItem: (_a: any) => any;
declare var templateObject_1$Z: any;
declare var PromotedGradient: any;
/**
 * Priority: Warning --> Success --> Active
 */
declare var getBorderColor: (_a: any) => any;
declare var StyledCard: any;
declare var StyledCardInner: any;
declare var templateObject_1$Y: any, templateObject_2$u: any, templateObject_3$c: any, templateObject_4$9: any;
declare var Card: (_a: any) => any;
declare var CardBody: any;
declare var templateObject_1$X: any;
declare var CardHeader: any;
declare var templateObject_1$W: any;
declare var CardFooter: any;
declare var templateObject_1$V: any;
declare var StyledCardRibbon: any;
declare var CardRibbon: (_a: any) => any;
declare var templateObject_1$U: any;
declare var animation: {
    WAVES: string;
    PULSE: string;
};
declare var variant: {
    RECT: string;
    CIRCLE: string;
};
declare var waves: any;
declare var pulse: any;
declare var Root: any;
declare var Pulse: any;
declare var Waves: any;
declare var Skeleton: (_a: any) => any;
declare var templateObject_1$T: any, templateObject_2$t: any, templateObject_3$b: any, templateObject_4$8: any, templateObject_5$5: any;
declare var PriceLink: any;
declare var CakePrice: (_a: any) => any;
declare var CakePrice$1: any;
declare var templateObject_1$S: any;
declare var scales$6: {
    SM: string;
    MD: string;
};
declare var getScale$3: (_a: any) => "32px" | "24px";
declare var Checkbox: any;
declare var templateObject_1$R: any;
declare var getLeft: (_a: any) => "50%" | "100%";
declare var getBottom: (_a: any) => "auto" | "100%";
declare var DropdownContent: any;
declare var Container$1: any;
declare var Dropdown: (_a: any) => any;
declare var templateObject_1$Q: any, templateObject_2$s: any;
declare var bunnyFall: any;
declare var Bunny: any;
declare var FallingBunnies: (_a: any) => any;
declare var templateObject_1$P: any, templateObject_2$r: any;
declare var tags: {
    H1: string;
    H2: string;
    H3: string;
    H4: string;
    H5: string;
    H6: string;
};
declare var scales$5: {
    MD: string;
    LG: string;
    XL: string;
    XXL: string;
};
declare var _a$3: any;
declare var style: {};
declare var Heading: any;
declare var templateObject_1$O: any;
declare var observerOptions: {
    root: null;
    rootMargin: string;
    threshold: number;
};
declare var StyledWrapper: any;
declare var Wrapper$3: any;
declare var templateObject_1$N: any;
declare var Placeholder: any;
declare var templateObject_1$M: any;
declare var StyledBackgroundImage: any;
declare var BackgroundImage: (_a: any) => any;
declare var templateObject_1$L: any;
declare var StyledImage: any;
declare var Image: new (width?: number | undefined, height?: number | undefined) => HTMLImageElement;
declare var templateObject_1$K: any;
declare var TokenImage: any;
declare var templateObject_1$J: any;
declare var variants$4: {
    DEFAULT: string;
    INVERTED: string;
};
declare var _a$2: any, _b$2: any;
declare var StyledPrimaryImage: any;
declare var StyledSecondaryImage: any;
declare var templateObject_1$I: any, templateObject_2$q: any;
declare var TokenPairImage: (_a: any) => any;
declare var StyledProfileAvatar: any;
declare var StyledBunnyPlaceholder: any;
declare var ProfileAvatar: (props: any) => any;
declare var templateObject_1$H: any, templateObject_2$p: any;
declare var getPadding$1: (scale: any, hasIcon: any) => "48px" | "32px" | "56px" | "16px";
declare var StyledInputGroup: any;
declare var InputIcon: any;
declare var InputGroup: (_a: any) => any;
declare var templateObject_1$G: any, templateObject_2$o: any;
declare var GridLayout$1: any;
declare var templateObject_1$F: any;
declare var GridLayout: any;
declare var templateObject_1$E: any;
declare var StyledLink$1: any;
declare var Link: (_a: any) => any;
declare var templateObject_1$D: any;
declare var LinkExternal: (_a: any) => any;
declare var variants$3: {
    warning: {
        background: string;
        borderColor: string;
    };
    danger: {
        background: string;
        borderColor: string;
    };
};
declare var Icons$2: {
    warning: (props: any) => any;
    danger: (props: any) => any;
};
declare var MessageContainer: any;
declare var Message: (_a: any) => any;
declare var templateObject_1$C: any;
declare var NotificationDotRoot: any;
declare var Dot: any;
declare var NotificationDot: (_a: any) => any;
declare var templateObject_1$B: any, templateObject_2$n: any;
declare var Overlay: any;
declare var templateObject_1$A: any;
declare var scales$4: {
    SM: string;
    MD: string;
    LG: string;
};
declare var scaleKeyValues$1: {
    sm: {
        pancakeSize: string;
        travelDistance: string;
        toggleHeight: string;
        toggleWidth: string;
        pancakeThickness: string;
        pancakeTwoOffset: string;
        pancakeThreeOffset: string;
        butterTop: string;
        butterLeft: string;
        butterWidth: string;
        butterHeight: string;
        butterThickness: string;
        butterRadius: string;
        butterSmearOneTop: string;
        butterSmearOneLeft: string;
        butterSmearTwoTop: string;
        butterSmearTwoRight: string;
    };
    md: {
        pancakeSize: string;
        travelDistance: string;
        toggleHeight: string;
        toggleWidth: string;
        pancakeThickness: string;
        pancakeTwoOffset: string;
        pancakeThreeOffset: string;
        butterTop: string;
        butterLeft: string;
        butterWidth: string;
        butterHeight: string;
        butterThickness: string;
        butterRadius: string;
        butterSmearOneTop: string;
        butterSmearOneLeft: string;
        butterSmearTwoTop: string;
        butterSmearTwoRight: string;
    };
    lg: {
        pancakeSize: string;
        travelDistance: string;
        toggleHeight: string;
        toggleWidth: string;
        pancakeThickness: string;
        pancakeTwoOffset: string;
        pancakeThreeOffset: string;
        butterTop: string;
        butterLeft: string;
        butterWidth: string;
        butterHeight: string;
        butterThickness: string;
        butterRadius: string;
        butterSmearOneTop: string;
        butterSmearOneLeft: string;
        butterSmearTwoTop: string;
        butterSmearTwoRight: string;
    };
};
declare var getScale$2: (property: any) => (_a: any) => any;
declare var PancakeStack: any;
declare var PancakeInput: any;
declare var PancakeLabel: any;
declare var templateObject_1$z: any, templateObject_2$m: any, templateObject_3$a: any;
declare var PancakeToggle: (_a: any) => any;
declare var variants$2: {
    ROUND: string;
    FLAT: string;
};
declare var scales$3: {
    MD: string;
    SM: string;
};
declare var _a$1: any, _b$1: any;
declare var styleVariants$1: {};
declare var styleScales: {};
declare var Bar: any;
declare var StyledProgress: any;
declare var templateObject_1$y: any, templateObject_2$l: any;
declare var ProgressBunnyWrapper: any;
declare var templateObject_1$x: any;
declare var stepGuard: (step: any) => any;
declare var Progress: (_a: any) => any;
declare var scales$2: {
    SM: string;
    MD: string;
};
declare var getScale$1: (_a: any) => "32px" | "24px";
declare var getCheckedScale: (_a: any) => "20px" | "12px";
declare var Radio: any;
declare var templateObject_1$w: any;
declare var bunnyHeadMain: string;
declare var bunnyHeadMax: string;
declare var bunnyButt: string;
declare var getCursorStyle: (_a: any) => "not-allowed" | "cursor";
declare var getBaseThumbStyles: (_a: any) => string;
declare var SliderLabelContainer: any;
declare var SliderLabel: any;
declare var BunnyButt: any;
declare var BunnySlider: any;
declare var StyledInput: any;
declare var BarBackground: any;
declare var BarProgress: any;
declare var templateObject_1$v: any, templateObject_2$k: any, templateObject_3$9: any, templateObject_4$7: any, templateObject_5$4: any, templateObject_6$3: any, templateObject_7$1: any;
declare var Slider: (_a: any) => any;
declare var Icon$1: (props: any) => any;
declare var Icon: (props: any) => any;
declare var rotate: any;
declare var float: any;
declare var Container: any;
declare var RotatingPancakeIcon: any;
declare var FloatingPanIcon: any;
declare var Spinner: (_a: any) => any;
declare var templateObject_1$u: any, templateObject_2$j: any, templateObject_3$8: any, templateObject_4$6: any, templateObject_5$3: any;
declare var StepperWrapper: any;
declare var Stepper: (_a: any) => any;
declare var templateObject_1$t: any;
declare var getStepNumberFontColor: (_a: any) => any;
declare var StyledStep: any;
declare var Connector: any;
declare var ChildrenWrapper: any;
declare var ChildrenLeftWrapper: any;
declare var ChildrenRightWrapper: any;
declare var Wrapper$2: any;
declare var StepNumber: any;
/**
 * ChildrenLeftWrapper and ChildrenRightWrapper are used on the non mobile version, to force the alternate layout.
 * One of the child is hidden based on the step number.
 */
declare var Step: (_a: any) => any;
declare var templateObject_1$s: any, templateObject_2$i: any, templateObject_3$7: any, templateObject_4$5: any, templateObject_5$2: any, templateObject_6$2: any, templateObject_7: any;
declare var InlineMenuContainer: any;
declare var SubMenuContainer: any;
declare var ClickableElementContainer: any;
declare var SubMenuItem: any;
declare var templateObject_1$r: any, templateObject_2$h: any, templateObject_3$6: any, templateObject_4$4: any;
declare var portalRoot$1: HTMLElement | null;
declare var BaseMenu: (_a: any) => any;
declare var InlineMenu: (_a: any) => any;
declare var SubMenu: (_a: any) => any;
declare var StyledMenuItemContainer: any;
declare var StyledMenuItem: any;
declare var templateObject_1$q: any, templateObject_2$g: any;
declare var MenuItem$1: (_a: any) => any;
declare var StyledSubMenuItems: any;
declare var templateObject_1$p: any;
declare var SubMenuItems: (_a: any) => any;
declare var Td: any;
declare var Th: any;
declare var templateObject_1$o: any, templateObject_2$f: any;
declare var Table: any;
declare var templateObject_1$n: any;
declare var byTextAscending: (getTextProperty: any) => (objectA: any, objectB: any) => 0 | 1 | -1;
declare var byTextDescending: (getTextProperty: any) => (objectA: any, objectB: any) => 0 | 1 | -1;
declare var sortByColumn: (data: any, sortColumn: any, columns: any) => any;
declare var getPaginatedData: (rows: any, perPage: any, page: any) => any;
declare var getColumnsByName: (columns: any) => {};
declare var createReducer: () => (state: any, action: any) => any;
declare var sortDataInOrder: (data: any, columns: any) => any;
declare var makeRender: (value: any, render: any, row: any) => () => any;
declare var makeHeaderRender: (label: any, render: any) => () => any;
declare var useTable: (columns: any, data: any, options: any) => {
    headers: any;
    rows: any;
    originalRows: any;
    selectedRows: any;
    dispatch: any;
    selectRow: (rowId: any) => any;
    toggleAll: () => any;
    toggleSort: (columnName: any, isAscOverride: any) => any;
    setSearchString: (searchString: any) => any;
    pagination: any;
    toggleAllState: any;
};
declare var Icons$1: Readonly<{
    __proto__: null;
    AccountIcon: (props: any) => any;
    AccountFilledIcon: (props: any) => any;
    AddIcon: (props: any) => any;
    ArrowBackIcon: (props: any) => any;
    ArrowDownIcon: (props: any) => any;
    ArrowDropDownIcon: (props: any) => any;
    ArrowDropUpIcon: (props: any) => any;
    ArrowFirstIcon: (props: any) => any;
    ArrowForwardIcon: (props: any) => any;
    ArrowLastIcon: (props: any) => any;
    ArrowUpIcon: (props: any) => any;
    AutoRenewIcon: (props: any) => any;
    BinanceIcon: (props: any) => any;
    BinanceChainIcon: (props: any) => any;
    BlockIcon: (props: any) => any;
    BnbUsdtPairTokenIcon: (props: any) => any;
    BscScanIcon: (props: any) => any;
    BunnyCardsIcon: (props: any) => any;
    BunnyPlaceholderIcon: (props: any) => any;
    CameraIcon: (props: any) => any;
    Cards: (props: any) => any;
    CardViewIcon: (props: any) => any;
    CalculateIcon: (props: any) => any;
    CircleOutlineIcon: (props: any) => any;
    ChartIcon: (props: any) => any;
    CheckmarkIcon: (props: any) => any;
    CheckmarkCircleIcon: (props: any) => any;
    CheckmarkCircleFillIcon: (props: any) => any;
    ChevronDownIcon: (props: any) => any;
    ChevronLeftIcon: (props: any) => any;
    ChevronRightIcon: (props: any) => any;
    ChevronUpIcon: (props: any) => any;
    CloseIcon: (props: any) => any;
    CogIcon: (props: any) => any;
    Coin98Icon: (props: any) => any;
    CommunityIcon: (props: any) => any;
    CommunityFilledIcon: (props: any) => any;
    CopyIcon: (props: any) => any;
    CrownIcon: (props: any) => any;
    CurrencyIcon: (props: any) => any;
    EarnIcon: (props: any) => any;
    EarnFilledIcon: (props: any) => any;
    ErrorIcon: (props: any) => any;
    EllipsisIcon: (props: any) => any;
    InstagramIcon: (props: any) => any;
    GithubIcon: (props: any) => any;
    HelpIcon: (props: any) => any;
    HistoryIcon: (props: any) => any;
    InfoIcon: (props: any) => any;
    LanguageIcon: (props: any) => any;
    LanguageCurrencyIcon: (props: any) => any;
    LaurelLeftIcon: (props: any) => any;
    LaurelRightIcon: (props: any) => any;
    ListViewIcon: (props: any) => any;
    LoginIcon: (props: any) => any;
    LogoIcon: (props: any) => any;
    LogoWithTextIcon: any;
    LogoRoundIcon: (props: any) => any;
    MathWalletIcon: (props: any) => any;
    LogoutIcon: (props: any) => any;
    MedalBronzeIcon: (props: any) => any;
    MedalGoldIcon: (props: any) => any;
    MedalPurpleIcon: (props: any) => any;
    MedalSilverIcon: (props: any) => any;
    MedalTealIcon: (props: any) => any;
    MetamaskIcon: (props: any) => any;
    MinusIcon: (props: any) => any;
    MoreHorizontalIcon: (props: any) => any;
    MoreVerticalIcon: (props: any) => any;
    NftIcon: (props: any) => any;
    NftFilledIcon: (props: any) => any;
    NoProfileAvatarIcon: (props: any) => any;
    OpenNewIcon: (props: any) => any;
    PancakesIcon: (props: any) => any;
    PencilIcon: (props: any) => any;
    PancakeRoundIcon: (props: any) => any;
    PocketWatchIcon: (props: any) => any;
    PlayCircleOutlineIcon: (props: any) => any;
    PredictionsIcon: (props: any) => any;
    PrizeIcon: (props: any) => any;
    ProposalIcon: (props: any) => any;
    RemoveIcon: (props: any) => any;
    VerifiedIcon: (props: any) => any;
    ProgressBunny: (props: any) => any;
    PresentCheckIcon: (props: any) => any;
    PresentWonIcon: (props: any) => any;
    PresentNoneIcon: (props: any) => any;
    RedditIcon: (props: any) => any;
    RefreshIcon: (props: any) => any;
    ResourcesIcon: (props: any) => any;
    ResourcesFilledIcon: (props: any) => any;
    SafePalIcon: (props: any) => any;
    SearchIcon: (props: any) => any;
    SellIcon: (props: any) => any;
    ShareIcon: (props: any) => any;
    SmallDotIcon: (props: any) => any;
    StarFillIcon: (props: any) => any;
    StarLineIcon: (props: any) => any;
    SwapIcon: (props: any) => any;
    SwapFillIcon: (props: any) => any;
    SwapVertIcon: (props: any) => any;
    SyncAltIcon: (props: any) => any;
    TeamPlayerIcon: (props: any) => any;
    TelegramIcon: (props: any) => any;
    TestnetIcon: (props: any) => any;
    Ticket: (props: any) => any;
    TicketFillIcon: (props: any) => any;
    TicketRound: (props: any) => any;
    TimerIcon: (props: any) => any;
    TokenPocketIcon: (props: any) => any;
    TradeIcon: (props: any) => any;
    TradeFilledIcon: (props: any) => any;
    TrophyGoldIcon: (props: any) => any;
    TrustWalletIcon: (props: any) => any;
    TwitterIcon: (props: any) => any;
    TuneIcon: (props: any) => any;
    VisibilityOff: (props: any) => any;
    VisibilityOn: (props: any) => any;
    VolumeOffIcon: (props: any) => any;
    VolumeUpIcon: (props: any) => any;
    VoteIcon: (props: any) => any;
    WarningIcon: (props: any) => any;
    WalletConnectIcon: (props: any) => any;
    WalletIcon: (props: any) => any;
    WalletFilledIcon: (props: any) => any;
    WaitIcon: (props: any) => any;
    FarmIcon: (props: any) => any;
    GroupsIcon: (props: any) => any;
    HamburgerIcon: (props: any) => any;
    HamburgerCloseIcon: (props: any) => any;
    HomeIcon: (props: any) => any;
    IfoIcon: (props: any) => any;
    MoonIcon: (props: any) => any;
    MoreIcon: (props: any) => any;
    NftFillIcon: (props: any) => any;
    PoolIcon: (props: any) => any;
    SunIcon: (props: any) => any;
    TeamBattleIcon: (props: any) => any;
    TicketIcon: (props: any) => any;
    EarnFillIcon: (props: any) => any;
    TrophyIcon: (props: any) => any;
    TrophyFillIcon: (props: any) => any;
    Svg: any;
}>;
declare var IconComponent: (_a: any) => any;
declare var scales$1: {
    SM: string;
    MD: string;
    LG: string;
};
declare var scaleKeyValues: {
    sm: {
        handleHeight: string;
        handleWidth: string;
        handleLeft: string;
        handleTop: string;
        checkedLeft: string;
        toggleHeight: string;
        toggleWidth: string;
    };
    md: {
        handleHeight: string;
        handleWidth: string;
        handleLeft: string;
        handleTop: string;
        checkedLeft: string;
        toggleHeight: string;
        toggleWidth: string;
    };
    lg: {
        handleHeight: string;
        handleWidth: string;
        handleLeft: string;
        handleTop: string;
        checkedLeft: string;
        toggleHeight: string;
        toggleWidth: string;
    };
};
declare var getScale: (property: any) => (_a: any) => any;
declare var Handle: any;
declare var Input: any;
declare var StyledToggle: any;
declare var templateObject_1$m: any, templateObject_2$e: any, templateObject_3$5: any;
declare var Toggle: (_a: any) => any;
declare var ThemeSwitcher: (_a: any) => any;
declare var ThemeSwitcher$1: any;
declare var Wrapper$1: any;
declare var Inner$1: any;
declare var ButtonMenu: (_a: any) => any;
declare var templateObject_1$l: any, templateObject_2$d: any;
declare var getBorderRadius: (_a: any) => "16px 16px 0 0" | "24px 24px 0 0";
declare var getPadding: (_a: any) => "8px" | "16px";
declare var Tab: any;
declare var templateObject_1$k: any;
declare var variants$1: {
    PRIMARY: string;
    SECONDARY: string;
    SUCCESS: string;
    TEXTDISABLED: string;
    TEXTSUBTLE: string;
    BINANCE: string;
    FAILURE: string;
    WARNING: string;
};
declare var scales: {
    MD: string;
    SM: string;
};
declare var _a: any, _b: any;
declare var scaleVariants: {};
declare var styleVariants: {};
declare var getOutlineStyles: (_a: any) => string;
declare var StyledTag: any;
declare var templateObject_1$j: any;
declare var Tag: (_a: any) => any;
declare var baseColors: {
    failure: string;
    primary: string;
    primaryBright: string;
    primaryDark: string;
    secondary: string;
    success: string;
    warning: string;
};
declare var additionalColors: {
    binance: string;
    overlay: string;
    gold: string;
    silver: string;
    bronze: string;
};
declare var lightColors: any;
declare var darkColors: any;
declare var light$7: {
    background: any;
};
declare var dark$7: {
    background: any;
};
declare var breakpointMap: {
    xs: number;
    sm: number;
    md: number;
    lg: number;
    xl: number;
    xxl: number;
};
declare var breakpoints: string[];
declare var mediaQueries$1: {
    xs: string;
    sm: string;
    md: string;
    lg: string;
    xl: string;
    xxl: string;
    nav: string;
};
declare var shadows: {
    level1: string;
    active: string;
    success: string;
    warning: string;
    focus: string;
    inset: string;
    tooltip: string;
};
declare var spacing: number[];
declare var radii: {
    small: string;
    default: string;
    card: string;
    circle: string;
};
declare var zIndices: {
    dropdown: number;
    modal: number;
};
declare var base: {
    siteWidth: number;
    breakpoints: string[];
    mediaQueries: {
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        xxl: string;
        nav: string;
    };
    spacing: number[];
    shadows: {
        level1: string;
        active: string;
        success: string;
        warning: string;
        focus: string;
        inset: string;
        tooltip: string;
    };
    radii: {
        small: string;
        default: string;
        card: string;
        circle: string;
    };
    zIndices: {
        dropdown: number;
        modal: number;
    };
};
declare var light$6: {
    background: any;
    boxShadow: string;
    boxShadowActive: string;
    boxShadowSuccess: string;
    boxShadowWarning: string;
    cardHeaderBackground: {
        default: any;
        blue: any;
        bubblegum: any;
        violet: any;
    };
    dropShadow: string;
};
declare var dark$6: {
    background: any;
    boxShadow: string;
    boxShadowActive: string;
    boxShadowSuccess: string;
    boxShadowWarning: string;
    cardHeaderBackground: {
        default: any;
        blue: any;
        bubblegum: any;
        violet: any;
    };
    dropShadow: string;
};
declare var light$5: {
    handleBackground: any;
    handleShadow: any;
};
declare var dark$5: {
    handleBackground: any;
    handleShadow: any;
};
declare var light$4: {
    handleBackground: any;
};
declare var dark$4: {
    handleBackground: any;
};
declare var light$3: {
    handleBackground: any;
};
declare var dark$3: {
    handleBackground: any;
};
declare var light$2: {
    background: any;
};
declare var dark$2: {
    background: any;
};
declare var light$1: {
    background: any;
};
declare var dark$1: {
    background: any;
};
declare var light: {
    background: any;
    text: any;
    boxShadow: string;
};
declare var dark: {
    background: any;
    text: any;
    boxShadow: string;
};
declare var darkTheme: any;
declare var lightTheme: any;
declare var isTouchDevice: () => boolean;
declare var Arrow: any;
declare var StyledTooltip: any;
declare var templateObject_1$i: any, templateObject_2$c: any;
declare var invertTheme: (currentTheme: any) => any;
declare var portalRoot: HTMLElement | null;
declare var useTooltip: (content: any, options: any) => {
    targetRef: any;
    tooltip: any;
    tooltipVisible: any;
};
declare var InfoTooltip: (_a: any) => any;
declare var TimelineContainer: any;
declare var TimelineEvent: any;
declare var templateObject_1$h: any, templateObject_2$b: any;
declare var getTextColor$1: (eventStatus: any) => "success" | "textSubtle" | "textDisabled";
declare var Timeline: (_a: any) => any;
/**
 * Can't use the media queries from "base.mediaQueries" because of how matchMedia works
 * In order for the listener to trigger we need have have the media query with a range, e.g.
 * (min-width: 370px) and (max-width: 576px)
 * @see https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList
 */
declare var mediaQueries: {};
declare var getKey: (size: any) => string;
declare var useMatchBreakpoints: () => any;
declare var defaultParticleOptions: {
    size: number;
    distance: number;
};
declare var createParticle: (x: any, y: any, imgSrc: any, options: any) => void;
declare var defaultOptions: {
    numberOfParticles: number;
    debounceDuration: number;
    particleOptions: {};
};
/**
 * @see https://css-tricks.com/playing-with-particles-using-the-web-animations-api/
 */
declare var useParticleBurst: (options: any) => {
    initialize: any;
    teardown: any;
};
declare var useKonamiCheatCode: (matchedCodeHandler: any) => void;
declare var ModalHeader: any;
declare var ModalTitle: any;
declare var ModalBody: any;
declare var ModalCloseButton: (_a: any) => any;
declare var ModalBackButton: (_a: any) => any;
declare var ModalContainer: any;
declare var templateObject_1$g: any, templateObject_2$a: any, templateObject_3$4: any, templateObject_4$3: any;
declare var Modal: (_a: any) => any;
declare var ModalWrapper: any;
declare var Context: any;
declare var ModalProvider: (_a: any) => any;
declare var templateObject_1$f: any;
declare var useModal: (modal: any, closeOnOverlayClick: any, updateOnPropsChange: any, modalId: any) => any[];
declare var StyledIconContainer: any;
declare var StyledAnimatedIconComponent: any;
declare var templateObject_1$e: any, templateObject_2$9: any;
declare var Icons: Readonly<{
    __proto__: null;
    AccountIcon: (props: any) => any;
    AccountFilledIcon: (props: any) => any;
    AddIcon: (props: any) => any;
    ArrowBackIcon: (props: any) => any;
    ArrowDownIcon: (props: any) => any;
    ArrowDropDownIcon: (props: any) => any;
    ArrowDropUpIcon: (props: any) => any;
    ArrowFirstIcon: (props: any) => any;
    ArrowForwardIcon: (props: any) => any;
    ArrowLastIcon: (props: any) => any;
    ArrowUpIcon: (props: any) => any;
    AutoRenewIcon: (props: any) => any;
    BinanceIcon: (props: any) => any;
    BinanceChainIcon: (props: any) => any;
    BlockIcon: (props: any) => any;
    BnbUsdtPairTokenIcon: (props: any) => any;
    BscScanIcon: (props: any) => any;
    BunnyCardsIcon: (props: any) => any;
    BunnyPlaceholderIcon: (props: any) => any;
    CameraIcon: (props: any) => any;
    Cards: (props: any) => any;
    CardViewIcon: (props: any) => any;
    CalculateIcon: (props: any) => any;
    CircleOutlineIcon: (props: any) => any;
    ChartIcon: (props: any) => any;
    CheckmarkIcon: (props: any) => any;
    CheckmarkCircleIcon: (props: any) => any;
    CheckmarkCircleFillIcon: (props: any) => any;
    ChevronDownIcon: (props: any) => any;
    ChevronLeftIcon: (props: any) => any;
    ChevronRightIcon: (props: any) => any;
    ChevronUpIcon: (props: any) => any;
    CloseIcon: (props: any) => any;
    CogIcon: (props: any) => any;
    Coin98Icon: (props: any) => any;
    CommunityIcon: (props: any) => any;
    CommunityFilledIcon: (props: any) => any;
    CopyIcon: (props: any) => any;
    CrownIcon: (props: any) => any;
    CurrencyIcon: (props: any) => any;
    EarnIcon: (props: any) => any;
    EarnFilledIcon: (props: any) => any;
    ErrorIcon: (props: any) => any;
    EllipsisIcon: (props: any) => any;
    InstagramIcon: (props: any) => any;
    GithubIcon: (props: any) => any;
    HelpIcon: (props: any) => any;
    HistoryIcon: (props: any) => any;
    InfoIcon: (props: any) => any;
    LanguageIcon: (props: any) => any;
    LanguageCurrencyIcon: (props: any) => any;
    LaurelLeftIcon: (props: any) => any;
    LaurelRightIcon: (props: any) => any;
    ListViewIcon: (props: any) => any;
    LoginIcon: (props: any) => any;
    LogoIcon: (props: any) => any;
    LogoWithTextIcon: any;
    LogoRoundIcon: (props: any) => any;
    MathWalletIcon: (props: any) => any;
    LogoutIcon: (props: any) => any;
    MedalBronzeIcon: (props: any) => any;
    MedalGoldIcon: (props: any) => any;
    MedalPurpleIcon: (props: any) => any;
    MedalSilverIcon: (props: any) => any;
    MedalTealIcon: (props: any) => any;
    MetamaskIcon: (props: any) => any;
    MinusIcon: (props: any) => any;
    MoreHorizontalIcon: (props: any) => any;
    MoreVerticalIcon: (props: any) => any;
    NftIcon: (props: any) => any;
    NftFilledIcon: (props: any) => any;
    NoProfileAvatarIcon: (props: any) => any;
    OpenNewIcon: (props: any) => any;
    PancakesIcon: (props: any) => any;
    PencilIcon: (props: any) => any;
    PancakeRoundIcon: (props: any) => any;
    PocketWatchIcon: (props: any) => any;
    PlayCircleOutlineIcon: (props: any) => any;
    PredictionsIcon: (props: any) => any;
    PrizeIcon: (props: any) => any;
    ProposalIcon: (props: any) => any;
    RemoveIcon: (props: any) => any;
    VerifiedIcon: (props: any) => any;
    ProgressBunny: (props: any) => any;
    PresentCheckIcon: (props: any) => any;
    PresentWonIcon: (props: any) => any;
    PresentNoneIcon: (props: any) => any;
    RedditIcon: (props: any) => any;
    RefreshIcon: (props: any) => any;
    ResourcesIcon: (props: any) => any;
    ResourcesFilledIcon: (props: any) => any;
    SafePalIcon: (props: any) => any;
    SearchIcon: (props: any) => any;
    SellIcon: (props: any) => any;
    ShareIcon: (props: any) => any;
    SmallDotIcon: (props: any) => any;
    StarFillIcon: (props: any) => any;
    StarLineIcon: (props: any) => any;
    SwapIcon: (props: any) => any;
    SwapFillIcon: (props: any) => any;
    SwapVertIcon: (props: any) => any;
    SyncAltIcon: (props: any) => any;
    TeamPlayerIcon: (props: any) => any;
    TelegramIcon: (props: any) => any;
    TestnetIcon: (props: any) => any;
    Ticket: (props: any) => any;
    TicketFillIcon: (props: any) => any;
    TicketRound: (props: any) => any;
    TimerIcon: (props: any) => any;
    TokenPocketIcon: (props: any) => any;
    TradeIcon: (props: any) => any;
    TradeFilledIcon: (props: any) => any;
    TrophyGoldIcon: (props: any) => any;
    TrustWalletIcon: (props: any) => any;
    TwitterIcon: (props: any) => any;
    TuneIcon: (props: any) => any;
    VisibilityOff: (props: any) => any;
    VisibilityOn: (props: any) => any;
    VolumeOffIcon: (props: any) => any;
    VolumeUpIcon: (props: any) => any;
    VoteIcon: (props: any) => any;
    WarningIcon: (props: any) => any;
    WalletConnectIcon: (props: any) => any;
    WalletIcon: (props: any) => any;
    WalletFilledIcon: (props: any) => any;
    WaitIcon: (props: any) => any;
    FarmIcon: (props: any) => any;
    GroupsIcon: (props: any) => any;
    HamburgerIcon: (props: any) => any;
    HamburgerCloseIcon: (props: any) => any;
    HomeIcon: (props: any) => any;
    IfoIcon: (props: any) => any;
    MoonIcon: (props: any) => any;
    MoreIcon: (props: any) => any;
    NftFillIcon: (props: any) => any;
    PoolIcon: (props: any) => any;
    SunIcon: (props: any) => any;
    TeamBattleIcon: (props: any) => any;
    TicketIcon: (props: any) => any;
    EarnFillIcon: (props: any) => any;
    TrophyIcon: (props: any) => any;
    TrophyFillIcon: (props: any) => any;
    Svg: any;
}>;
declare var AnimatedIconComponent: (_a: any) => any;
declare var StyledBottomNavItem$1: any;
declare var StyledBottomNavText: any;
declare var templateObject_1$d: any, templateObject_2$8: any;
declare var BottomNavItem: (_a: any) => any;
declare var StyledBottomNavItem: any;
declare var templateObject_1$c: any;
declare var getTextColor: (_a: any) => any;
declare var DropdownMenuItem: any;
declare var StyledDropdownMenuItemContainer: any;
declare var DropdownMenuDivider: any;
declare var StyledOverlay: any;
declare var StyledDropdownMenu: any;
declare var LinkStatus: any;
declare var templateObject_1$b: any, templateObject_2$7: any, templateObject_3$3: any, templateObject_4$2: any, templateObject_5$1: any, templateObject_6$1: any;
declare var DropdownMenu: (_a: any) => any;
declare var BottomNav: (_a: any) => any;
declare var socials: ({
    label: string;
    icon: string;
    href: string;
    items?: undefined;
} | {
    label: string;
    icon: string;
    items: {
        label: string;
        href: string;
    }[];
    href?: undefined;
})[];
declare var SocialLinks: (_a: any) => any;
declare var SocialLinks$1: any;
declare var StyledFooter: any;
declare var StyledList: any;
declare var StyledListItem: any;
declare var StyledIconMobileContainer: any;
declare var StyledToolsContainer: any;
declare var StyledSocialLinks: any;
declare var templateObject_1$a: any, templateObject_2$6: any, templateObject_3$2: any, templateObject_4$1: any, templateObject_5: any, templateObject_6: any;
declare var MenuButton: any;
declare var templateObject_1$9: any;
declare var LangSelector: (_a: any) => any;
declare var LangSelector$1: any;
declare var MenuItem: (_a: any) => any;
declare var MenuItems: (_a: any) => any;
declare var blink: any;
declare var StyledLink: any;
declare var Logo: (_a: any) => any;
declare var Logo$1: any;
declare var templateObject_1$8: any, templateObject_2$5: any;
declare var status: string;
declare var links: {
    label: string;
    href: string;
    icon: string;
    items: ({
        label: string;
        href: string;
        status?: undefined;
        type?: undefined;
    } | {
        label: string;
        href: string;
        status: any;
        type?: undefined;
    } | {
        type: any;
        label?: undefined;
        href?: undefined;
        status?: undefined;
    } | {
        label: string;
        href: string;
        type: any;
        status?: undefined;
    })[];
}[];
declare var MENU_HEIGHT: number;
declare var MOBILE_MENU_HEIGHT: number;
declare var Wrapper: any;
declare var StyledNav: any;
declare var BodyWrapper: any;
declare var Inner: any;
declare var Menu$1: (_a: any) => any;
declare var templateObject_1$7: any, templateObject_2$4: any, templateObject_3$1: any, templateObject_4: any;
declare var variants: {
    DEFAULT: string;
    WARNING: string;
    DANGER: string;
    PENDING: string;
};
declare var MenuIconWrapper: any;
declare var ProfileIcon: any;
declare var NoProfileMenuIcon: () => any;
declare var PendingMenuIcon: () => any;
declare var WarningMenuIcon: () => any;
declare var DangerMenuIcon: () => any;
declare var MenuIcon: (_a: any) => any;
declare var templateObject_1$6: any, templateObject_2$3: any;
declare var UserMenuDivider: any;
declare var UserMenuItem: any;
declare var templateObject_1$5: any, templateObject_2$2: any;
declare var StyledUserMenu: any;
declare var LabelText: any;
declare var Menu: any;
declare var UserMenu: (_a: any) => any;
declare var templateObject_1$4: any, templateObject_2$1: any, templateObject_3: any;
declare var connectors: {
    title: string;
    icon: (props: any) => any;
    connectorId: any;
    priority: number;
}[];
declare var connectorLocalStorageKey: string;
declare var walletLocalStorageKey: string;
declare var WalletButton: any;
declare var MoreWalletCard: (_a: any) => any;
declare var WalletCard: (_a: any) => any;
declare var templateObject_1$3: any;
declare var WalletWrapper: any;
/**
 * Checks local storage if we have saved the last wallet the user connected with
 * If we find something we put it at the top of the list
 *
 * @returns sorted config
 */
declare var getPreferredConfig: (walletConfig: any) => any;
declare var ConnectModal: (_a: any) => any;
declare var templateObject_1$2: any;
declare var StyleButton: any;
declare var Tooltip: any;
declare var CopyToClipboard: (_a: any) => any;
declare var templateObject_1$1: any, templateObject_2: any;
declare var AccountModal: (_a: any) => any;
declare var useWalletModal: (login: any, logout: any, t: any, account: any) => {
    onPresentConnectModal: any;
    onPresentAccountModal: any;
};
declare var ResetCSS: any;
declare var templateObject_1: any;
